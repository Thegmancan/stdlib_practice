import re


def test_patterns(text, patterns=None):
    """
    Given source text and a list of patterns, look for matches for each pattern within the text
    and print them to stdout.
    """
    if patterns is None:
        patterns = []
    # Look for each pattern in the text and print the results
    for pattern, desc in patterns:
        print "Pattern %r (%s)\n" % (pattern, desc)
        print "  %r" % text
        for match in re.finditer(pattern, text):
            s = match.start()
            e = match.end()
            substring = text[s:e]
            n_backslashes = text[:s].count('\\')
            prefix = "." * (s + n_backslashes)
            print "  %s%r" % (prefix, substring)
        print
    return

if __name__ == "__main__":
    test_patterns(
        'abbaabbba',
        [('ab*',     'a followed by zero or more b'),
         ('ab+',     'a followed by one or more b'),
         ('ab?',     'a followed by zero or one b'),
         ('ab{3}',   'a followed by three b'),
         ('ab{2,3}', 'a followed by two to three b'),
         ])
